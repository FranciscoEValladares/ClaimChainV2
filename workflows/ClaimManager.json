{
  "name": "ClaimManager",
  "nodes": [
    {
      "parameters": {},
      "id": "8b65d937-7865-423c-92c7-e166d341d4b0",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -3200,
        192
      ]
    },
    {
      "parameters": {
        "url": "https://api.claimchain.example/claims",
        "options": {}
      },
      "id": "277c5b48-ae5b-4a45-bdf9-0a22574a3067",
      "name": "Fetch Claims",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        -2960,
        192
      ]
    },
    {
      "parameters": {},
      "id": "79e101a9-ba6b-48a0-93cc-3103c591a932",
      "name": "Validate Claims Schema",
      "type": "n8n-nodes-base.jsonSchema",
      "typeVersion": 1,
      "position": [
        -2704,
        64
      ]
    },
    {
      "parameters": {},
      "id": "7984c75a-10a1-48d4-8a74-b00cbb7794ae",
      "name": "Normalize Claims",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        -2704,
        304
      ]
    },
    {
      "parameters": {},
      "id": "668bcc28-5fea-42a1-8b58-559855dae49d",
      "name": "Filter Pending",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        -2448,
        192
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json[\"amount\"]}}",
              "operation": "larger",
              "value2": 0
            }
          ]
        },
        "options": {}
      },
      "id": "c1cadedb-e8bc-42fd-b0f4-a0d4dd669125",
      "name": "Validate Amount > 0",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -2208,
        192
      ]
    },
    {
      "parameters": {
        "url": "https://api.payments.example/payouts",
        "jsonParameters": true,
        "options": {}
      },
      "id": "2b5dc09f-7c66-448a-a68c-300fcb357572",
      "name": "Send Payout",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        -1952,
        80
      ]
    },
    {
      "parameters": {},
      "id": "0c1ee5f3-1324-4720-9d35-46edc5aa5b69",
      "name": "Aggregate Payouts",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        -1712,
        192
      ]
    },
    {
      "parameters": {
        "url": "https://api.claimchain.example/funds",
        "options": {}
      },
      "id": "11bfd097-09f3-41d4-9b63-dc9b28793b27",
      "name": "Fetch Fund Balance",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        -1456,
        64
      ]
    },
    {
      "parameters": {},
      "id": "a1d8482b-c9a7-41db-9afe-d0e3f0882a06",
      "name": "Compute Solvency",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        -1200,
        144
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json[\"solvency\"]}}",
              "operation": "largerEqual",
              "value2": 0
            }
          ]
        },
        "options": {}
      },
      "id": "4473115e-d006-4dc8-8556-f86f51e94750",
      "name": "Check Solvency >= 0",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -960,
        144
      ]
    },
    {
      "parameters": {
        "channel": "claims-alerts",
        "text": "üö® Insufficient funds detected! Balance: {{$json[\"balance\"]}}, Payouts: {{$json[\"payouts\"]}}",
        "otherOptions": {},
        "attachments": []
      },
      "id": "e8e670ea-20ea-4583-9295-cad6f9e3d293",
      "name": "Slack Alert Insufficient Funds",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        -704,
        -16
      ]
    },
    {
      "parameters": {
        "table": "claim_audit",
        "columns": "memberId, amount, status, timestamp",
        "additionalFields": {}
      },
      "id": "47358a21-f710-4a18-bd40-1b13685da1c9",
      "name": "Log to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -704,
        288
      ]
    },
    {
      "parameters": {},
      "id": "03fa8104-173a-4157-86dd-faafc04a5123",
      "name": "Success Message",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        -448,
        192
      ]
    },
    {
      "parameters": {},
      "id": "a12b780c-2b45-47d6-8243-d3f37f8dcec1",
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        -2960,
        496
      ]
    },
    {
      "parameters": {
        "channel": "claims-alerts",
        "text": "‚ùå Error occurred in ClaimChain workflow: {{$json[\"error\"]}}",
        "otherOptions": {},
        "attachments": []
      },
      "id": "cb01ebd8-67e4-42c9-9a1c-5dac604a0f8b",
      "name": "Slack Error Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        -2704,
        496
      ]
    },
    {
      "parameters": {
        "url": "https://monitoring.example/webhook",
        "jsonParameters": true,
        "options": {}
      },
      "id": "5ceca240-8376-493b-b05e-f8bc971b2f3c",
      "name": "Webhook Notify Monitoring",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        -2448,
        496
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "claim-intake",
        "options": {}
      },
      "id": "b52a83c9-2094-4c98-ac9d-6d7983db1948",
      "name": "Webhook - Claim Intake",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -3168,
        848
      ],
      "webhookId": "c437d890-5686-4a28-8b63-4eec9888c492"
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { claimId: Date.now(), claimant: $json[\"body\"].wallet, details: $json[\"body\"].details, evidence: $json[\"body\"].evidence, status: \"PENDING\" } }];"
      },
      "id": "34c7a251-17bf-4393-bc65-a87fe7fe8f8c",
      "name": "Function - Prepare Claim Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2912,
        848
      ]
    },
    {
      "parameters": {
        "table": "claims",
        "columns": "claimId, claimant, details, evidence, status",
        "additionalFields": {}
      },
      "id": "620498c2-f92e-4db0-a1e0-4143dc56bd07",
      "name": "Database - Store Claim",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -2656,
        848
      ],
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "juror-commit",
        "options": {}
      },
      "id": "7a799058-d3de-445c-8f25-ba49ae3e3f8b",
      "name": "Webhook - Juror Commit",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -3168,
        1152
      ],
      "webhookId": "2a962835-4f79-4788-bb4e-f5239933f6a3"
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { claimId: $json[\"body\"].claimId, juror: $json[\"body\"].juror, commitHash: $json[\"body\"].commitHash } }];"
      },
      "id": "50cfaa9c-6968-47df-bbc9-3e79c713a64c",
      "name": "Function - Store Commit",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2912,
        1152
      ]
    },
    {
      "parameters": {
        "table": "juror_commits",
        "columns": "claimId, juror, commitHash",
        "additionalFields": {}
      },
      "id": "869b7083-a072-42d9-bd58-700d88c8f137",
      "name": "Database - Save Commit",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -2656,
        1152
      ],
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "juror-reveal",
        "options": {}
      },
      "id": "80b2d3ad-1877-43f0-a642-d7ce59491bb5",
      "name": "Webhook - Juror Reveal",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -3168,
        1456
      ],
      "webhookId": "dd5ec389-e971-4d16-934e-3b99e40c0340"
    },
    {
      "parameters": {
        "functionCode": "const crypto = require('crypto');\nconst reveal = $json[\"body\"].vote;\nconst salt = $json[\"body\"].salt;\nconst commitHash = $json[\"body\"].commitHash;\nconst hashCheck = crypto.createHash('sha256').update(reveal+salt).digest('hex');\nif(hashCheck === commitHash){\n  return [{ json: { valid: true, claimId: $json[\"body\"].claimId, juror: $json[\"body\"].juror, vote: reveal } }];\n} else {\n  return [{ json: { valid: false } }];\n}"
      },
      "id": "228f794f-cb37-488a-9640-23fd7c702e12",
      "name": "Function - Validate Reveal",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2912,
        1456
      ]
    },
    {
      "parameters": {
        "table": "juror_votes",
        "columns": "claimId, juror, vote, valid",
        "additionalFields": {}
      },
      "id": "f4f5dcd4-dec4-4cd6-b0d3-1f5785c41348",
      "name": "Database - Save Vote",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -2656,
        1456
      ],
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "url": "https://trusted-oracle.example/api/check",
        "jsonParameters": true,
        "options": {}
      },
      "id": "486d2879-d5c6-4e74-9c14-555ac1d4fd14",
      "name": "HTTP Request - Oracle Check",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -3168,
        1760
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.amount}}",
              "operation": "larger",
              "value2": 10000
            }
          ]
        }
      },
      "id": "8afd646e-0afd-42c3-9fb2-6ae34020edc4",
      "name": "IF - Fraud Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -2912,
        1760
      ]
    },
    {
      "parameters": {
        "url": "https://stablecoin-api.example/transfer",
        "jsonParameters": true,
        "options": {}
      },
      "id": "70bcc092-1245-4810-b9ce-e79f1bcaa933",
      "name": "HTTP Request - Payout",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -2656,
        1760
      ]
    },
    {
      "parameters": {
        "channel": "#claims",
        "text": "Claim {{$json.claimId}} resolved. Payout: {{$json.amount}} USDC",
        "otherOptions": {},
        "attachments": []
      },
      "id": "2593eddd-93e5-4ac9-a1ab-b90bdada96fe",
      "name": "Slack - Notify Claimant",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        -2416,
        1760
      ],
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "claim/submit",
        "options": {}
      },
      "id": "99eef8af-9c5b-41e6-a84a-8e8091eda1dc",
      "name": "Claim Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1904,
        928
      ],
      "webhookId": "7ff872fd-6e3d-42fe-802c-8cb0a6d17b9f"
    },
    {
      "parameters": {
        "functionCode": "const { claimant, claimType, evidenceHash } = items[0].json;\nif (!claimant || !claimType || !evidenceHash) {\n  throw new Error('Missing required fields');\n}\nreturn items;"
      },
      "id": "4f9e3a1f-1a7c-4a52-9b66-40144fe0bc52",
      "name": "Validate Claim",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1696,
        928
      ]
    },
    {
      "parameters": {
        "table": "claims",
        "columns": "claimant, claim_type, evidence_hash, status",
        "additionalFields": {}
      },
      "id": "ab03c649-380e-4a2b-8cfc-ccfd164df076",
      "name": "Store Claim in DB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -1504,
        928
      ],
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "channel": "#jurors",
        "text": "New claim filed. Please commit your vote (approve/deny).",
        "otherOptions": {},
        "attachments": []
      },
      "id": "b6c63137-a095-49d6-b80b-10cfbf3b0f25",
      "name": "Notify Jurors (Slack)",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        -1296,
        928
      ],
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "juror/commit",
        "options": {}
      },
      "id": "2c9f8ee0-4cf8-4f11-88c3-c553677db335",
      "name": "Juror Commit Vote (Webhook)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1904,
        1232
      ],
      "webhookId": "2e368403-93cb-4e16-b85e-919c4b1a2662"
    },
    {
      "parameters": {
        "table": "votes",
        "columns": "juror, claim_id, commit_hash",
        "additionalFields": {}
      },
      "id": "e730652f-8872-4217-b563-c0782a9c7ff3",
      "name": "Store Commit Hash",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -1696,
        1232
      ],
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "juror/reveal",
        "options": {}
      },
      "id": "3cd053ec-aa1d-41d1-83d7-c9fe30827a10",
      "name": "Juror Reveal Vote (Webhook)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1904,
        1440
      ],
      "webhookId": "c41cb4a2-a9cc-491a-b2a8-08a8b2ac9e33"
    },
    {
      "parameters": {
        "functionCode": "const crypto = require('crypto');\nconst { vote, salt, commitHash } = items[0].json;\nconst hash = crypto.createHash('sha256').update(vote + salt).digest('hex');\nif (hash !== commitHash) {\n  throw new Error('Reveal does not match commit');\n}\nreturn items;"
      },
      "id": "819a1b1d-2236-4eca-b3ea-538ca3d5ebc5",
      "name": "Validate Reveal vs Commit",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1696,
        1440
      ]
    },
    {
      "parameters": {
        "url": "https://oracle.example.com/verify",
        "jsonParameters": true,
        "options": {}
      },
      "id": "c06e6489-6a24-4dad-8398-b13a5e6ff18e",
      "name": "Oracle Evidence Check",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1904,
        1632
      ]
    },
    {
      "parameters": {
        "functionCode": "const votes = $json.votes;\nconst oracle = $json.oracle;\nlet approve = votes.filter(v => v === 'approve').length;\nlet deny = votes.filter(v => v === 'deny').length;\nif (oracle.verified && approve > deny) {\n  return [{json: { decision: 'approved' }}];\n} else {\n  return [{json: { decision: 'denied' }}];\n}"
      },
      "id": "d611b7a6-6e81-46fc-bd2e-b6abf173d24f",
      "name": "Tally Votes + Oracle",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1696,
        1632
      ]
    },
    {
      "parameters": {
        "url": "https://stablecoin-api.example/payout",
        "jsonParameters": true,
        "options": {}
      },
      "id": "94d2eb1a-4790-4ba7-892e-585fc5265bc1",
      "name": "Execute Payout (Stablecoin API)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1504,
        1632
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "table": "claims",
        "columns": "status",
        "additionalFields": {}
      },
      "id": "4eb1bb38-8cda-435d-b414-c19628e00d3a",
      "name": "Update Claim Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -1296,
        1632
      ],
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "channel": "#claimant",
        "text": "Your claim has been {{$json.decision}}.",
        "otherOptions": {},
        "attachments": []
      },
      "id": "4408b6c7-3266-4b6a-8e56-b3104834a2f8",
      "name": "Notify Claimant (Slack)",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        -1104,
        1632
      ],
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS claims (\n    id SERIAL PRIMARY KEY,\n    claimant VARCHAR(100),\n    amount NUMERIC(12,2),\n    status VARCHAR(50) DEFAULT 'pending',\n    evidence JSONB,\n    decision VARCHAR(50),\n    payout_tx VARCHAR(255),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS votes (\n    id SERIAL PRIMARY KEY,\n    claim_id INT REFERENCES claims(id),\n    juror_id VARCHAR(100),\n    commit_hash VARCHAR(255),\n    revealed_vote VARCHAR(50),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);",
        "additionalFields": {}
      },
      "id": "c774c091-215e-447b-a923-ad3eee917e51",
      "name": "Init DB Schema",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -576,
        1136
      ],
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "path": "claim-intake",
        "options": {}
      },
      "id": "43f7b5d6-2dd3-43c9-805e-1ab31cc51e37",
      "name": "Webhook Claim Intake",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -576,
        1296
      ],
      "webhookId": "7e1f112a-9a4e-43ee-9ca1-6c5cf67aeed4"
    },
    {
      "parameters": {
        "table": "claims",
        "columns": [
          "claimant",
          "amount",
          "status",
          "evidence"
        ],
        "additionalFields": {}
      },
      "id": "f4385ab8-60f4-45cb-9407-d329f6a1491c",
      "name": "DB Insert Claim",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -320,
        1296
      ],
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "url": "https://httpbin.org/post",
        "jsonParameters": true,
        "options": {}
      },
      "id": "7ffd5e9d-4aa6-453b-ab74-30688a1aee4e",
      "name": "HTTP Payout Stub",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -64,
        1296
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "table": "claims",
        "columns": [
          "status"
        ],
        "additionalFields": {}
      },
      "id": "08d24af4-ef04-4a6e-aec7-798eee108547",
      "name": "DB Mark Error",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        176,
        1296
      ],
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "channel": "#alerts",
        "text": "üö® Claim {{$json[\"id\"]}} payout failed. Please check DB.",
        "otherOptions": {},
        "attachments": []
      },
      "id": "88dc7e0e-304d-4df5-ace9-7eb82b814123",
      "name": "Slack Error Alert1",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        176,
        1136
      ],
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {},
      "id": "91bb897c-191e-4a14-b26a-38b0359a70c2",
      "name": "Validate Claim Schema",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        -2992,
        2368
      ]
    },
    {
      "parameters": {
        "table": "claims",
        "columns": "claim_id,user_id,amount,evidence_url,status,created_at",
        "additionalFields": {}
      },
      "id": "2b572bdf-fcf4-4e64-b379-239303c94031",
      "name": "DB - Save Claim",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -2768,
        2368
      ],
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {},
      "id": "4a90375b-c466-42bc-a53a-df6b573d0bf7",
      "name": "Fraud Check",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        -2544,
        2368
      ]
    },
    {
      "parameters": {
        "operation": "postMessage"
      },
      "id": "269170c5-2259-4a77-9b1a-7f965c09eb9d",
      "name": "Slack - Fraud Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        -2336,
        2288
      ],
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "url": "https://oracle-api.example/validate",
        "options": {}
      },
      "id": "119f308c-3d47-4803-9b6a-828e2c27c753",
      "name": "HTTP - Oracle Evidence Check",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -2336,
        2448
      ]
    },
    {
      "parameters": {},
      "id": "7514f0bf-de10-48cb-82ec-36288c0702c3",
      "name": "Validate Oracle Signature",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        -2112,
        2448
      ]
    },
    {
      "parameters": {},
      "id": "c543a741-bca6-43cd-976f-f1017b224536",
      "name": "Juror Commit Phase",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        -1888,
        2400
      ]
    },
    {
      "parameters": {},
      "id": "5c25f8e1-c48f-4c48-a993-6517f9d78d2e",
      "name": "Juror Reveal Phase",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        -1664,
        2400
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "table": "claims",
        "updateKey": "claim_id",
        "columns": "status,resolved_at",
        "additionalFields": {}
      },
      "id": "f64d73c3-b43a-4c20-906d-c98379d21a47",
      "name": "DB - Update Claim Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -1456,
        2400
      ],
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "url": "https://stablecoin-api.example/payout",
        "options": {}
      },
      "id": "c1fd449a-461e-4240-9de0-344d2232beb7",
      "name": "HTTP - Stablecoin Payout",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -1232,
        2400
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "claim-intake",
        "options": {}
      },
      "id": "46a2764b-c04f-490d-804f-cca2d8e4bd43",
      "name": "Webhook - Claim Intake1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -3216,
        2368
      ],
      "webhookId": "31362e59-d356-402f-9b70-3972b4ccf5e1"
    },
    {
      "parameters": {
        "operation": "postMessage"
      },
      "id": "daa0f425-6647-4bc5-9675-a8a38f5a5598",
      "name": "Slack - Notify Claimant1",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        -1008,
        2400
      ],
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const claim = {\n  claimId: $json.claimId,\n  userId: $json.userId,\n  amount: $json.amount,\n  evidenceUrl: $json.evidenceUrl,\n  status: 'submitted'\n};\nreturn [{json: claim}];"
      },
      "name": "Prepare Claim",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -256,
        2384
      ],
      "id": "8e78a63e-b485-4d72-8a49-183cd9322b5a"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "string": [
            {
              "value1": "={{$json.fraudFlags.length}}",
              "operation": "notEqual",
              "value2": "0"
            }
          ]
        }
      },
      "name": "IF Fraud Flagged",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        336,
        2272
      ],
      "id": "9d547cd5-3921-41bf-9a1c-4e593ac31954"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.resolution}}",
              "value2": "approved"
            }
          ]
        }
      },
      "name": "IF Approved?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1136,
        2480
      ],
      "id": "f35976a2-1f5a-4c5f-b0f2-034ffd5ba091"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE claims SET status='approved', resolved_at=NOW() WHERE claim_id={{$json.claimId}};",
        "additionalFields": {}
      },
      "name": "DB - Update Claim Approved",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1344,
        2384
      ],
      "id": "118765a1-eb39-4746-99f6-52fdea521a23",
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "channel": "#claims-updates",
        "text": "‚úÖ Claim {{$json.claimId}} approved and paid out.",
        "otherOptions": {},
        "attachments": []
      },
      "name": "Slack - Notify Claimant (Approved)",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        1744,
        2384
      ],
      "id": "2633e297-8489-4965-8117-7f9f7f6129a4",
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE claims SET status='rejected', resolved_at=NOW() WHERE claim_id={{$json.claimId}};",
        "additionalFields": {}
      },
      "name": "DB - Update Claim Rejected",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1344,
        2576
      ],
      "id": "3124002c-29e5-4174-9628-d1511f3cd5ee",
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "channel": "#claims-updates",
        "text": "‚ùå Claim {{$json.claimId}} rejected after juror review.",
        "otherOptions": {},
        "attachments": []
      },
      "name": "Slack - Notify Claimant (Rejected)",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        1536,
        2576
      ],
      "id": "d26f513f-9376-4b89-ade6-0549bf38917f",
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO claim_events (claim_id, event_type, payload)\nVALUES ({{$json.claimId}}, '{{$json.resolution || \"status_update\"}}', {{$json}});",
        "additionalFields": {}
      },
      "name": "DB - Log Event",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1936,
        2480
      ],
      "id": "52e5a83f-ed43-42de-a2c8-def6f7cfc196",
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "path": "claim-intake",
        "options": {}
      },
      "name": "Webhook - Claim Intake2",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -464,
        2384
      ],
      "webhookDescription": "Entry point for new claims",
      "id": "fa66aad1-1d84-437b-b174-30ebfaaacb56",
      "webhookId": "75fb278a-e794-4dc9-a305-5ea135522b94"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO claims (claim_id, user_id, amount, evidence_url, status)\nVALUES ({{$json.claimId}}, {{$json.userId}}, {{$json.amount}}, {{$json.evidenceUrl}}, 'submitted');",
        "additionalFields": {}
      },
      "name": "DB - Save Claim1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -64,
        2384
      ],
      "id": "41af6511-d02e-452f-8416-d1dae81a3120",
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const flagged = [];\nif ($json.amount > 10000) flagged.push('high_amount');\nreturn [{json: { ...$json, fraudFlags: flagged }}];"
      },
      "name": "Fraud Check1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        144,
        2384
      ],
      "id": "e1576c99-4d91-47b4-ac6c-a531542caacf"
    },
    {
      "parameters": {
        "channel": "#fraud-desk",
        "text": "‚ö†Ô∏è Fraud alert on Claim {{$json.claimId}}",
        "otherOptions": {},
        "attachments": []
      },
      "name": "Slack - Fraud Alert1",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        544,
        2272
      ],
      "id": "90162e7d-ef1d-426f-937b-0b49a337d685",
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "url": "https://oracle-api.example/validate",
        "jsonParameters": true,
        "options": {}
      },
      "name": "HTTP - Oracle Evidence Check1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        336,
        2480
      ],
      "id": "44d1be54-e209-4808-8933-b4f9dcd988b7"
    },
    {
      "parameters": {
        "functionCode": "return [{json:{...$json, oracleApproved:true, signature:\"0xtest\"}}];"
      },
      "name": "Validate Oracle Signature1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        544,
        2480
      ],
      "id": "f8ec240b-f1d3-4960-aa91-7949f3f40405"
    },
    {
      "parameters": {
        "functionCode": "return [{json:{...$json, commitVotes:[\"yes\",\"yes\",\"no\"]}}];"
      },
      "name": "Juror Commit Phase1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        736,
        2480
      ],
      "id": "c628f85b-fd20-4edf-9a51-32edaf936677"
    },
    {
      "parameters": {
        "functionCode": "const votes = $json.commitVotes || [];\nconst yes = votes.filter(v=>v==='yes').length;\nconst no = votes.length - yes;\nconst resolution = yes>no ? 'approved' : 'rejected';\nreturn [{json:{...$json, resolution}}];"
      },
      "name": "Juror Reveal Phase1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        944,
        2480
      ],
      "id": "cf43583d-8a3c-4b22-9b45-71b5cfa6612a"
    },
    {
      "parameters": {
        "url": "https://stablecoin-api.example/payout",
        "jsonParameters": true,
        "options": {}
      },
      "name": "HTTP - Stablecoin Payout1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1536,
        2384
      ],
      "id": "65459836-0f3c-4cca-aad3-01a3f7d91606"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.fraud}}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "id": "d8b93de3-861c-4326-abb7-86c58b8011d6",
      "name": "If Fraud Flagged",
      "type": "n8n-nodes-base.if",
      "position": [
        -2464,
        2992
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.approved}}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "id": "9f72ffe6-e863-4e0d-aa71-df659cc6178d",
      "name": "If Approved?",
      "type": "n8n-nodes-base.if",
      "position": [
        -1664,
        3088
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "claim-intake",
        "options": {}
      },
      "id": "63df6104-f2be-4285-9948-0e7e1b4d4624",
      "name": "Webhook - Claim Intake3",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -3280,
        2992
      ],
      "typeVersion": 2.1,
      "webhookId": "a34c6974-b9c4-4a12-83ef-0688f94e4035"
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { claimId: Date.now(), ...items[0].json } }];"
      },
      "id": "a0b2bc31-1db7-4e77-8cb9-5abc40dd95e7",
      "name": "Prepare Claim1",
      "type": "n8n-nodes-base.function",
      "position": [
        -3072,
        2992
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": "claims",
        "options": {}
      },
      "id": "982e16c1-119b-4c15-b995-661d84d6bd3d",
      "name": "DB - Save Claim2",
      "type": "n8n-nodes-base.postgres",
      "position": [
        -2880,
        2992
      ],
      "typeVersion": 2.6,
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.FRAUD_API_URL}}",
        "options": {}
      },
      "id": "ffe6f479-7027-4dea-80fe-84dc75f6036f",
      "name": "Fraud Check2",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -2672,
        2992
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "text": "Fraud detected on claim {{$json.claimId}}",
        "otherOptions": {}
      },
      "id": "866ae968-0c8d-4dd7-82f3-2a203e436dff",
      "name": "Slack - Fraud Alert2",
      "type": "n8n-nodes-base.slack",
      "position": [
        -2272,
        2880
      ],
      "typeVersion": 2.3,
      "webhookId": "ee8e9809-5bef-4725-a729-05f3551b55b4",
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "url": "={{$env.ORACLE_API_URL}}/evidence",
        "options": {}
      },
      "id": "9415d984-4e61-4790-924b-d532404d3f95",
      "name": "HTTP - Oracle Evidence Check2",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -2272,
        3088
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { claimId: $json.claimId, phase: 'commit', status: 'awaiting votes' } }];"
      },
      "id": "cce092bf-0c38-4a88-92ad-360d9c3d08f1",
      "name": "Juror Commit Phase2",
      "type": "n8n-nodes-base.function",
      "position": [
        -2064,
        3088
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { claimId: $json.claimId, phase: 'reveal', verdicts: $json.verdicts } }];"
      },
      "id": "0687d218-73a1-4f8c-a91f-356acbc86c77",
      "name": "Juror Reveal Phase2",
      "type": "n8n-nodes-base.function",
      "position": [
        -1872,
        3088
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": "claims",
        "options": {}
      },
      "id": "c37f7f3d-f24b-494b-bd17-0a3b10c73181",
      "name": "DB - Update Claim Approved1",
      "type": "n8n-nodes-base.postgres",
      "position": [
        -1472,
        2992
      ],
      "typeVersion": 2.6,
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.PAYOUT_API_URL}}/send",
        "options": {}
      },
      "id": "6c9ab8da-c660-4a54-bdc5-5e56e6912bbe",
      "name": "HTTP - Stablecoin Payout2",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -1472,
        3088
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "text": "‚úÖ Claim {{$json.claimId}} approved! Payout sent.",
        "otherOptions": {}
      },
      "id": "f4810c90-341b-43a7-a0c3-69a5579c3c70",
      "name": "Slack - Notify Claimant (Approved)1",
      "type": "n8n-nodes-base.slack",
      "position": [
        -1264,
        2992
      ],
      "typeVersion": 2.3,
      "webhookId": "52eeb88d-0f4f-47f8-84ae-0ba183e77b84",
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": "claims",
        "options": {}
      },
      "id": "34ef2cb1-3b6d-45c7-9262-663bbfe46cf1",
      "name": "DB - Update Claim Rejected1",
      "type": "n8n-nodes-base.postgres",
      "position": [
        -1472,
        3184
      ],
      "typeVersion": 2.6,
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "text": "‚ùå Claim {{$json.claimId}} rejected after review.",
        "otherOptions": {}
      },
      "id": "57e37b26-6a61-4d0b-9533-d5324750c50a",
      "name": "Slack - Notify Claimant (Rejected)1",
      "type": "n8n-nodes-base.slack",
      "position": [
        -1264,
        3184
      ],
      "typeVersion": 2.3,
      "webhookId": "178ecd94-fa94-4002-97d2-d3216d36de42",
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": "events",
        "options": {}
      },
      "id": "32712052-bf37-48e6-832e-7692299d0f62",
      "name": "DB - Log Event1",
      "type": "n8n-nodes-base.postgres",
      "position": [
        -1072,
        3088
      ],
      "typeVersion": 2.6,
      "credentials": {
        "postgres": {
          "id": null,
          "name": "Postgres_Connection"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "claim-v8-intake",
        "options": {}
      },
      "id": "42220dfd-4b17-4e69-bce5-1b19ac252eef",
      "name": "Webhook - HMAC Verified",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        432,
        432
      ],
      "webhookId": "e4e4dda6-8aef-4ff1-8fed-7d8b11a2fc9a"
    },
    {
      "parameters": {
        "functionCode": "const crypto = require('crypto');\n\nconst secret = $env.HMAC_SECRET;\nconst sigHeader = $json.headers['x-claimchain-signature'];\nconst payload = JSON.stringify($json.body);\n\nconst hash = crypto.createHmac('sha256', secret).update(payload).digest('hex');\n\nif (hash !== sigHeader) {\n  throw new Error('Invalid HMAC signature');\n}\n\nreturn items;"
      },
      "id": "210dc9f2-0090-4ff3-8449-42119e918928",
      "name": "HMAC Verification",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        736,
        432
      ]
    },
    {
      "parameters": {
        "functionCode": "const key = $json.body.idempotencyKey;\nif (!key) throw new Error('Missing idempotencyKey');\n\n// Simple in-memory store (replace with Redis/DB for production)\nglobal.store = global.store || {};\nif (global.store[key]) {\n  return [];\n}\n\nglobal.store[key] = true;\nreturn items;"
      },
      "id": "712dae0b-896c-4117-b27b-4e752a106ad6",
      "name": "Idempotency Check",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1040,
        432
      ]
    },
    {
      "parameters": {
        "functionCode": "const user = $json.body.user || 'anon';\nconst now = Date.now();\nglobal.rl = global.rl || {};\n\nif (!global.rl[user]) {\n  global.rl[user] = [];\n}\n\n// keep requests in the last 60s\nglobal.rl[user] = global.rl[user].filter(t => now - t < 60000);\n\nif (global.rl[user].length >= 5) {\n  throw new Error('Rate limit exceeded');\n}\n\nglobal.rl[user].push(now);\nreturn items;"
      },
      "id": "92c082a3-c57e-4d12-a5b4-feb0f0a303f9",
      "name": "Rate Limiter",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1328,
        432
      ]
    },
    {
      "parameters": {
        "functionCode": "global.dlq = global.dlq || [];\n// push failed payloads into DLQ\nglobal.dlq.push({ timestamp: Date.now(), payload: $json });\nreturn items;"
      },
      "id": "25c8845e-c8e5-485e-aa7a-405316058722",
      "name": "Dead Letter Queue",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1632,
        432
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "claim-v8-replay",
        "options": {}
      },
      "id": "7522f2a9-3907-4a56-978a-77e5e58ff380",
      "name": "Replay Endpoint",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        1936,
        432
      ],
      "webhookId": "f4102010-79cb-43a0-8a28-ea7e1c5ae593"
    },
    {
      "parameters": {
        "functionCode": "global.dlq = global.dlq || [];\nconst replayed = global.dlq.splice(0, global.dlq.length);\nreturn replayed.map(r => ({ json: r.payload }));"
      },
      "id": "d87ceeb0-e54d-4164-bdb6-17926e277d09",
      "name": "Replay Processor",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2240,
        432
      ]
    },
    {
      "parameters": {
        "path": "claim-v8-health",
        "options": {}
      },
      "id": "d79af302-fde7-4ac5-8b1e-6790205d0e62",
      "name": "Healthcheck",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        2544,
        432
      ],
      "webhookId": "0109f151-b6c3-4b09-9779-e20af07538c8"
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { status: 'ok', uptime: process.uptime(), dlqSize: (global.dlq||[]).length } }];"
      },
      "id": "b9fee115-301b-4ec1-b227-67a578af163d",
      "name": "Health Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2832,
        432
      ]
    },
    {
      "parameters": {
        "channel": "#alerts",
        "text": "üö® ClaimChain SLO Breach: Error or latency threshold exceeded",
        "otherOptions": {},
        "attachments": []
      },
      "id": "20938293-43c9-4677-9960-ea63b62985d4",
      "name": "Slack SLO Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        3136,
        432
      ],
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "YOUR_SLACK_CRED"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const dlq = global.dlq || [];\nif (dlq.length > 0) {\n  return [{ json: { dlqSize: dlq.length } }];\n}\nreturn [];"
      },
      "id": "114eacdc-7343-49ec-8e0e-8e02711800fe",
      "name": "DLQ Threshold Check",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        224,
        672
      ]
    },
    {
      "parameters": {
        "functionCode": "const dlq = global.dlq || [];\n// Change threshold here (default: any >0 triggers alert)\nif (dlq.length > 0) {\n  return [{ json: { dlqSize: dlq.length, message: `DLQ backlog detected: ${dlq.length} failed jobs` } }];\n}\nreturn [];"
      },
      "id": "9295f71b-4b7f-48c1-a878-5c81077b0a92",
      "name": "DLQ Threshold Check1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        992,
        2688
      ]
    },
    {
      "parameters": {
        "functionCode": "const dlq = global.dlq || [];\n// Change threshold here (default: any >0 triggers alert)\nif (dlq.length > 0) {\n  return [{ json: { dlqSize: dlq.length, message: `DLQ backlog detected: ${dlq.length} failed jobs` } }];\n}\nreturn [];"
      },
      "id": "6989b3c0-871a-4bac-a97c-8856b39f771b",
      "name": "DLQ Threshold Check2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        928,
        1296
      ]
    },
    {
      "parameters": {
        "functionCode": "const dlq = global.dlq || [];\n// Slack alert if more than 0 jobs in DLQ\nif (dlq.length > 0) {\n  return [{ json: { dlqSize: dlq.length, message: `DLQ backlog detected: ${dlq.length} failed jobs` } }];\n}\nreturn [];"
      },
      "id": "27251853-77a2-4b43-aead-368b13b71753",
      "name": "DLQ Threshold Check3",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        832,
        1552
      ]
    },
    {
      "parameters": {
        "functionCode": "const addr = ($json.body?.wallet || $json.body?.address || $json.address || '').toLowerCase();\nif (!addr || !/^0x[a-f0-9]{40}$/.test(addr)) {\n  throw new Error('Missing or invalid EVM address for Passport check');\n}\nreturn [{ json: { ...$json, _passport: { address: addr } } }];"
      },
      "id": "65e9165b-9a66-4fcb-9291-167570945bf3",
      "name": "Extract Wallet Address",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1088,
        1968
      ]
    },
    {
      "parameters": {
        "functionCode": "const addr = $json._passport.address;\nconst now = Date.now();\nconst TTL = 5 * 60 * 1000;\nglobal.passportCache = global.passportCache || {};\nconst hit = global.passportCache[addr];\nif (hit && (now - hit.t) < TTL) {\n  return [{ json: { ...$json, _passport: { ...$json._passport, score: hit.score, passing_score: hit.passing, threshold: hit.threshold, cached: true } } }];\n}\nreturn items;"
      },
      "id": "87da4e43-5be8-4507-b111-2edc7d20e0bc",
      "name": "Cache (5m)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1280,
        1968
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json._passport.cached}}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "id": "867572d7-9aae-4ab0-a7e5-045a0ea459f8",
      "name": "IF Cached?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1392,
        2096
      ]
    },
    {
      "parameters": {
        "url": "={{`https://api.passport.xyz/v2/stamps/${$env.GITCOIN_SCORER_ID}/score/${$json._passport.address}`}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "cb77cb04-4b31-436c-b019-fb2550b1c3c1",
      "name": "Passport Score (Gitcoin)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1488,
        1968
      ]
    },
    {
      "parameters": {
        "functionCode": "const res = items[0].json;\nconst passing = res.passing_score === true || Number(res.score) >= Number($env.PASSPORT_THRESHOLD || 20);\nconst threshold = res.threshold || ($env.PASSPORT_THRESHOLD || 20);\nconst out = { ...$json, _passport: { ...$json._passport, score: res.score, passing_score: passing, threshold, stamps: res.stamps, cached: $json._passport.cached || false } };\nif (!$json._passport.cached) {\n  global.passportCache = global.passportCache || {};\n  global.passportCache[out._passport.address] = { score: res.score, passing: passing, threshold, t: Date.now() };\n}\nreturn [{ json: out }];"
      },
      "id": "b8efb04e-0f16-444b-aa60-58ab0985664c",
      "name": "Unpack & Save Cache",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1680,
        1968
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json._passport.passing_score}}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "id": "9d27cfdd-1230-43de-8f55-3168c036ed1b",
      "name": "IF Passport Passes?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1888,
        1968
      ]
    },
    {
      "parameters": {
        "channel": "#alerts",
        "text": "üö´ Passport gate failed for {{$json._passport.address}} (score: {{$json._passport.score}} / threshold: {{$json._passport.threshold}}).",
        "otherOptions": {},
        "attachments": []
      },
      "id": "31f1d4e8-a7e2-43cf-86ec-35c530701fab",
      "name": "Slack: Passport Gate Denied",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        2080,
        1888
      ],
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "ce5d3afa-eba4-41c5-b1b0-dc3e9e56c6de",
      "name": "Respond 403 (Blocked)",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2288,
        1888
      ]
    },
    {
      "parameters": {
        "functionCode": "const addr = ($json.body?.wallet || $json.body?.address || $json.address || '').toLowerCase();\nif (!addr || !/^0x[a-f0-9]{40}$/.test(addr)) {\n  throw new Error('Missing or invalid EVM address for Passport check');\n}\nreturn [{ json: { ...$json, _passport: { address: addr } } }];"
      },
      "id": "1ac836c5-5856-4083-a14c-8d1cae691aeb",
      "name": "Extract Wallet Address1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -944,
        3072
      ]
    },
    {
      "parameters": {
        "functionCode": "const addr = $json._passport.address;\nconst now = Date.now();\nconst TTL = 5 * 60 * 1000;\nglobal.passportCache = global.passportCache || {};\nconst hit = global.passportCache[addr];\nif (hit && (now - hit.t) < TTL) {\n  return [{ json: { ...$json, _passport: { ...$json._passport, score: hit.score, passing_score: hit.passing, threshold: hit.threshold, cached: true } } }];\n}\nreturn items;"
      },
      "id": "641a5cd2-33af-4684-b8af-c0ec111f793b",
      "name": "Cache (5m)1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -752,
        3072
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json._passport.cached}}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "id": "a1af3498-c32b-4441-a20d-d4068f69b4df",
      "name": "IF Cached?1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -640,
        3200
      ]
    },
    {
      "parameters": {
        "url": "={{`https://api.passport.xyz/v2/stamps/${$env.GITCOIN_SCORER_ID}/score/${$json._passport.address}`}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "7e44f51b-00f6-471c-b969-0f4bc5a83f4e",
      "name": "Passport Score (Gitcoin)1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -544,
        3072
      ]
    },
    {
      "parameters": {
        "functionCode": "const res = items[0].json;\nconst passing = res.passing_score === true || Number(res.score) >= Number($env.PASSPORT_THRESHOLD || 20);\nconst threshold = res.threshold || ($env.PASSPORT_THRESHOLD || 20);\nconst out = { ...$json, _passport: { ...$json._passport, score: res.score, passing_score: passing, threshold, stamps: res.stamps, cached: $json._passport.cached || false } };\nif (!$json._passport.cached) {\n  global.passportCache = global.passportCache || {};\n  global.passportCache[out._passport.address] = { score: res.score, passing: passing, threshold, t: Date.now() };\n}\nreturn [{ json: out }];"
      },
      "id": "acb10e66-6b15-4a7a-a8c7-4a8a3088cf36",
      "name": "Unpack & Save Cache1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -352,
        3072
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json._passport.passing_score}}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "id": "d07238da-7d7a-43b5-b099-3c54c3bffcac",
      "name": "IF Passport Passes?1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -144,
        3072
      ]
    },
    {
      "parameters": {
        "channel": "#alerts",
        "text": "üö´ Passport gate failed for {{$json._passport.address}} (score: {{$json._passport.score}} / threshold: {{$json._passport.threshold}}).",
        "otherOptions": {},
        "attachments": []
      },
      "id": "6841599a-561e-4030-b663-1bf3d7969fb9",
      "name": "Slack: Passport Gate Denied1",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        64,
        2992
      ],
      "credentials": {
        "slackApi": {
          "id": null,
          "name": "Slack_Connection"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "0f5ed4aa-7f0b-426a-9902-374b8e3da79f",
      "name": "Respond 403 (Blocked)1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        256,
        2992
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Fetch Claims",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Amount > 0": {
      "main": [
        [
          {
            "node": "Send Payout",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Solvency >= 0": {
      "main": [
        [
          {
            "node": "Log to Database",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slack Alert Insufficient Funds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Slack Error Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Webhook Notify Monitoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Claim Intake": {
      "main": [
        [
          {
            "node": "DB Insert Claim",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB Insert Claim": {
      "main": [
        [
          {
            "node": "HTTP Payout Stub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB - Update Claim Status": {
      "main": [
        [
          {
            "node": "HTTP - Stablecoin Payout",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP - Stablecoin Payout": {
      "main": [
        [
          {
            "node": "Slack - Notify Claimant1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Claim": {
      "main": [
        [
          {
            "node": "DB - Save Claim1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Fraud Flagged": {
      "main": [
        [
          {
            "node": "Slack - Fraud Alert1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Approved?": {
      "main": [
        [
          {
            "node": "DB - Update Claim Approved",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DB - Update Claim Rejected",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB - Update Claim Approved": {
      "main": [
        [
          {
            "node": "HTTP - Stablecoin Payout1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack - Notify Claimant (Approved)": {
      "main": [
        [
          {
            "node": "DB - Log Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB - Update Claim Rejected": {
      "main": [
        [
          {
            "node": "Slack - Notify Claimant (Rejected)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack - Notify Claimant (Rejected)": {
      "main": [
        [
          {
            "node": "DB - Log Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook - Claim Intake2": {
      "main": [
        [
          {
            "node": "Prepare Claim",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB - Save Claim1": {
      "main": [
        [
          {
            "node": "Fraud Check1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fraud Check1": {
      "main": [
        [
          {
            "node": "IF Fraud Flagged",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP - Oracle Evidence Check1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP - Oracle Evidence Check1": {
      "main": [
        [
          {
            "node": "Validate Oracle Signature1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Oracle Signature1": {
      "main": [
        [
          {
            "node": "Juror Commit Phase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Juror Commit Phase1": {
      "main": [
        [
          {
            "node": "Juror Reveal Phase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Juror Reveal Phase1": {
      "main": [
        [
          {
            "node": "IF Approved?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP - Stablecoin Payout1": {
      "main": [
        [
          {
            "node": "Slack - Notify Claimant (Approved)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Fraud Flagged": {
      "main": [
        [
          {
            "node": "Slack - Fraud Alert2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP - Oracle Evidence Check2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Approved?": {
      "main": [
        [
          {
            "node": "DB - Update Claim Approved1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP - Stablecoin Payout2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Slack - Notify Claimant (Approved)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DB - Update Claim Rejected1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Slack - Notify Claimant (Rejected)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook - Claim Intake3": {
      "main": [
        [
          {
            "node": "Prepare Claim1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Claim1": {
      "main": [
        [
          {
            "node": "DB - Save Claim2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB - Save Claim2": {
      "main": [
        [
          {
            "node": "Fraud Check2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fraud Check2": {
      "main": [
        [
          {
            "node": "If Fraud Flagged",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP - Oracle Evidence Check2": {
      "main": [
        [
          {
            "node": "Juror Commit Phase2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Juror Commit Phase2": {
      "main": [
        [
          {
            "node": "Juror Reveal Phase2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Juror Reveal Phase2": {
      "main": [
        [
          {
            "node": "If Approved?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB - Update Claim Approved1": {
      "main": [
        [
          {
            "node": "DB - Log Event1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP - Stablecoin Payout2": {
      "main": [
        [
          {
            "node": "DB - Log Event1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack - Notify Claimant (Approved)1": {
      "main": [
        [
          {
            "node": "DB - Log Event1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB - Update Claim Rejected1": {
      "main": [
        [
          {
            "node": "DB - Log Event1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack - Notify Claimant (Rejected)1": {
      "main": [
        [
          {
            "node": "DB - Log Event1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Wallet Address": {
      "main": [
        [
          {
            "node": "Cache (5m)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache (5m)": {
      "main": [
        [
          {
            "node": "IF Cached?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Cached?": {
      "main": [
        [
          {
            "node": "IF Passport Passes?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Passport Score (Gitcoin)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Passport Score (Gitcoin)": {
      "main": [
        [
          {
            "node": "Unpack & Save Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unpack & Save Cache": {
      "main": [
        [
          {
            "node": "IF Passport Passes?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Passport Passes?": {
      "main": [
        [],
        [
          {
            "node": "Slack: Passport Gate Denied",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack: Passport Gate Denied": {
      "main": [
        [
          {
            "node": "Respond 403 (Blocked)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Wallet Address1": {
      "main": [
        [
          {
            "node": "Cache (5m)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache (5m)1": {
      "main": [
        [
          {
            "node": "IF Cached?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Cached?1": {
      "main": [
        [
          {
            "node": "IF Passport Passes?1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Passport Score (Gitcoin)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Passport Score (Gitcoin)1": {
      "main": [
        [
          {
            "node": "Unpack & Save Cache1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unpack & Save Cache1": {
      "main": [
        [
          {
            "node": "IF Passport Passes?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Passport Passes?1": {
      "main": [
        [],
        [
          {
            "node": "Slack: Passport Gate Denied1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack: Passport Gate Denied1": {
      "main": [
        [
          {
            "node": "Respond 403 (Blocked)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "32225574-c320-4e43-a746-3d28fd9b3e40",
  "meta": {
    "instanceId": "525d3081582f90ae2aa6b580919268d02ac5d851319640869783e8c1964950d0"
  },
  "id": "23mlkHldkUbuyvhx",
  "tags": []
}